{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "authorized-sigma",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "import numpy as np\n",
    "\n",
    "pickle_in = open(\"X_train.pickle\",\"rb\")\n",
    "X_train = pickle.load(pickle_in)\n",
    "\n",
    "pickle_in = open(\"y_train.pickle\",\"rb\")\n",
    "y_train = pickle.load(pickle_in)\n",
    "\n",
    "X_train = np.array(X_train/255.0)\n",
    "y_train = np.array(y_train)\n",
    "\n",
    "pickle_in = open(\"X_test.pickle\",\"rb\") \n",
    "X_test = pickle.load(pickle_in)\n",
    "\n",
    "pickle_in = open(\"y_test.pickle\",\"rb\") \n",
    "y_test = pickle.load(pickle_in)\n",
    "\n",
    "X_test = np.array(X_test/255.0) \n",
    "y_test = np.array(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "usual-restriction",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout, Flatten"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "silent-custody",
   "metadata": {},
   "outputs": [],
   "source": [
    "classifier = Sequential()\n",
    "classifier.add(Flatten(input_shape=X_train.shape[1:]))\n",
    "classifier.add(Dense(128, activation='relu'))\n",
    "classifier.add(Dense(64, activation='relu'))\n",
    "classifier.add(Dropout(0.2))\n",
    "classifier.add(Dense(1, activation='sigmoid'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "advanced-counter",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "18/18 [==============================] - 3s 162ms/step - loss: 1.4581 - accuracy: 0.7263 - val_loss: 0.5170 - val_accuracy: 0.8770\n",
      "Epoch 2/10\n",
      "18/18 [==============================] - 2s 133ms/step - loss: 0.7289 - accuracy: 0.8427 - val_loss: 0.4740 - val_accuracy: 0.8673\n",
      "Epoch 3/10\n",
      "18/18 [==============================] - 2s 120ms/step - loss: 0.4532 - accuracy: 0.9036 - val_loss: 0.4620 - val_accuracy: 0.8803\n",
      "Epoch 4/10\n",
      "18/18 [==============================] - 2s 121ms/step - loss: 0.3598 - accuracy: 0.9305 - val_loss: 0.5834 - val_accuracy: 0.8608\n",
      "Epoch 5/10\n",
      "18/18 [==============================] - 2s 122ms/step - loss: 0.3256 - accuracy: 0.9383 - val_loss: 0.5783 - val_accuracy: 0.8738\n",
      "Epoch 6/10\n",
      "18/18 [==============================] - 2s 122ms/step - loss: 0.2142 - accuracy: 0.9679 - val_loss: 0.5403 - val_accuracy: 0.8673\n",
      "Epoch 7/10\n",
      "18/18 [==============================] - 2s 123ms/step - loss: 0.2110 - accuracy: 0.9696 - val_loss: 0.5081 - val_accuracy: 0.8544\n",
      "Epoch 8/10\n",
      "18/18 [==============================] - 2s 121ms/step - loss: 0.1222 - accuracy: 0.9818 - val_loss: 0.3777 - val_accuracy: 0.8867\n",
      "Epoch 9/10\n",
      "18/18 [==============================] - 2s 119ms/step - loss: 0.1012 - accuracy: 0.9818 - val_loss: 0.6683 - val_accuracy: 0.8867\n",
      "Epoch 10/10\n",
      "18/18 [==============================] - 2s 119ms/step - loss: 0.0950 - accuracy: 0.9748 - val_loss: 0.4567 - val_accuracy: 0.8867\n"
     ]
    }
   ],
   "source": [
    "classifier.compile(optimizer='adam',\n",
    "             loss='binary_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "r=classifier.fit(X_train, y_train, batch_size=64, epochs=10, validation_data=(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fifty-specification",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.plot(r.history['loss'], label='loss')\n",
    "plt.plot(r.history['val_loss'], label='val_loss')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "plt.plot(r.history['accuracy'], label='acc')\n",
    "plt.plot(r.history['val_accuracy'], label='val_acc')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "73a2fbf2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "tensorflow_gpu",
   "language": "python",
   "name": "tensorflow_gpu"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
