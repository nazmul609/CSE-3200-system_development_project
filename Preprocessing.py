{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "sophisticated-difference",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "import cv2\n",
    "from tqdm import tqdm\n",
    "from random import shuffle\n",
    "\n",
    "TRAIN_DIR = \"G:/Cyclone_Dataset/Train_set\"\n",
    "TEST_DIR = \"G:/Cyclone_Dataset/Test_set\"\n",
    "\n",
    "CATEGORIES = [\"CYCLONE\", \"NO_CYCLONE\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "gross-thunder",
   "metadata": {},
   "outputs": [],
   "source": [
    "for category in CATEGORIES:  \n",
    "    path = os.path.join(TRAIN_DIR, category)  # create path to cyclone and no_cyclone dir\n",
    "    \n",
    "    for image in os.listdir(path):  # iterate over each image per cyclone and no_cyclone\n",
    "        img_array = cv2.imread(os.path.join(path,image) , cv2.IMREAD_GRAYSCALE)  # convert to array\n",
    "        \n",
    "        ret,img_array = cv2.threshold(img_array, 180, 220, cv2.THRESH_BINARY) # binary_threshold\n",
    "    \n",
    "        kernel = np.ones((2,2), np.uint8)\n",
    "        #img_array = cv2.dilate(img_array, kernel)# dilation\n",
    "        img_array = cv2.erode(img_array, kernel)# erosion\n",
    "\n",
    "        #img_array = cv2.Laplacian(img_array, cv2.CV_64F) # edge_detection_laplacian_gradient\n",
    "        #img_array = cv2.Canny(img_array, 100 , 200)#canny_edge_detection\n",
    "        \n",
    "        img_array = cv2.medianBlur(img_array, 1) # removes_noise\n",
    "        img_array = cv2.resize(img_array, (300,300)) \n",
    "        \n",
    "        img_array = cv2.resize(img_array, None, fx = 1, fy = 1, interpolation = cv2.INTER_AREA) # interpolation\n",
    "\n",
    "        \n",
    "        plt.imshow(img_array, cmap='gray')  \n",
    "        plt.show()  \n",
    "\n",
    "        break  # we just want one for now so break\n",
    "    break  #...and one more!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "veterinary-yugoslavia",
   "metadata": {},
   "outputs": [],
   "source": [
    "# NOW WE WILL PREPARE OUR TRAINING DATA\n",
    "\n",
    "\n",
    "training_data = []\n",
    "\n",
    "def create_training_data():\n",
    "    for category in CATEGORIES:  # do cyclone and no_cyclone\n",
    "\n",
    "        path = os.path.join(TRAIN_DIR,category)  # create path to cyclone and no_cyclone\n",
    "        class_num = CATEGORIES.index(category)  # get the classification  (0 or a 1). 0=cyclone 1=no_cyclone\n",
    "\n",
    "        for image in tqdm(os.listdir(path)):  # iterate over each image per cyclone and no_cyclone\n",
    "            try:\n",
    "                img_array = cv2.imread(os.path.join(path,image) , cv2.IMREAD_GRAYSCALE)  # convert to array\n",
    "        \n",
    "                ret,img_array = cv2.threshold(img_array, 180, 220, cv2.THRESH_BINARY) # binary_threshold\n",
    "    \n",
    "                kernel = np.ones((2,2), np.uint8)\n",
    "                #img_array = cv2.dilate(img_array, kernel)# dilation\n",
    "                img_array = cv2.erode(img_array, kernel)# erosion\n",
    "                \n",
    "                #img_array = cv2.Laplacian(img_array, cv2.CV_64F) # edge_detection_laplacian_gradient\n",
    "                #img_array = cv2.Canny(img_array, 100 , 200)#canny_edge_detection\n",
    "            \n",
    "\n",
    "                img_array = cv2.medianBlur(img_array, 1) # removes_noise\n",
    "                img_array = cv2.resize(img_array, (300,300)) \n",
    "\n",
    "                img_array = cv2.resize(img_array, None, fx = 1, fy = 1, interpolation = cv2.INTER_AREA) # interpolation\n",
    "\n",
    "                training_data.append([img_array, class_num])\n",
    "                \n",
    "            except Exception as e:  \n",
    "                pass\n",
    "\n",
    "create_training_data()\n",
    "\n",
    "print(len(training_data))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "efficient-woman",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "random.shuffle(training_data)\n",
    "\n",
    "#for sample in training_data[:10]:\n",
    "    #print(sample[1])\n",
    "    \n",
    "# We cann't pass a list to a neural network right?!\n",
    "X_train = []\n",
    "y_train = []\n",
    "\n",
    "for features,label in training_data:\n",
    "    X_train.append(features)\n",
    "    y_train.append(label)\n",
    "\n",
    "plt.imshow(X_train[1])\n",
    "plt.show()\n",
    "\n",
    "print(y_train[1])\n",
    "#print(X_train[0].reshape(-1, 300, 300, 1))\n",
    "\n",
    "X_train = np.array(X_train).reshape(-1, 300, 300, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "pressing-waters",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle \n",
    "\n",
    "#for X\n",
    "pickle_out = open(\"X_train.pickle\",\"wb\") \n",
    "pickle.dump(X_train, pickle_out) \n",
    "pickle_out.close()\n",
    "\n",
    "#for y \n",
    "pickle_out = open(\"y_train.pickle\",\"wb\") \n",
    "pickle.dump(y_train, pickle_out) \n",
    "pickle_out.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "convinced-syndicate",
   "metadata": {},
   "outputs": [],
   "source": [
    "testing_data = []\n",
    "\n",
    "def create_testing_data():\n",
    "    for category in CATEGORIES:  # do cyclone and no_cyclone\n",
    "\n",
    "        path = os.path.join(TEST_DIR,category)  \n",
    "        class_num = CATEGORIES.index(category)  # get the classification  (0 or a 1). 0=cyclone 1=no_cyclone\n",
    "\n",
    "        for image in tqdm(os.listdir(path)):  \n",
    "            try:\n",
    "                img_array = cv2.imread(os.path.join(path,image) , cv2.IMREAD_GRAYSCALE)  # convert to array\n",
    "        \n",
    "                ret,img_array = cv2.threshold(img_array, 180, 220, cv2.THRESH_BINARY) # binary_threshold\n",
    "    \n",
    "                kernel = np.ones((2,2), np.uint8)\n",
    "                #img_array = cv2.dilate(img_array, kernel)# dilation\n",
    "                img_array = cv2.erode(img_array, kernel)# erosion\n",
    "                \n",
    "                #img_array = cv2.Laplacian(img_array, cv2.CV_64F) # edge_detection_laplacian_gradient\n",
    "                #img_array = cv2.Canny(img_array, 100 , 200)#canny_edge_detection\n",
    "\n",
    "                img_array = cv2.medianBlur(img_array, 1) # removes_noise\n",
    "                img_array = cv2.resize(img_array, (300,300)) \n",
    "\n",
    "                img_array = cv2.resize(img_array, None, fx = 1, fy = 1, interpolation = cv2.INTER_AREA) # interpolation\n",
    "\n",
    "            \n",
    "                testing_data.append([img_array, class_num]) \n",
    "                \n",
    "            except Exception as e:  \n",
    "                pass\n",
    "\n",
    "create_testing_data()\n",
    "\n",
    "print(len(testing_data))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "breathing-romantic",
   "metadata": {},
   "outputs": [],
   "source": [
    "random.shuffle(testing_data)\n",
    "\n",
    "X_test = []\n",
    "y_test = []\n",
    "\n",
    "for features,label in testing_data:\n",
    "    X_test.append(features)\n",
    "    y_test.append(label)\n",
    "    \n",
    "plt.imshow(X_test[1])\n",
    "plt.show()\n",
    "\n",
    "print(y_test[1])\n",
    "#print(X[0].reshape(-1, 300, 300, 1))\n",
    "\n",
    "X_test = np.array(X_test).reshape(-1, 300, 300, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "accepted-buddy",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# for X\n",
    "pickle_out = open(\"X_test.pickle\",\"wb\")\n",
    "pickle.dump(X_test, pickle_out)\n",
    "pickle_out.close()\n",
    "\n",
    "#for y\n",
    "pickle_out = open(\"y_test.pickle\",\"wb\")\n",
    "pickle.dump(y_test, pickle_out)\n",
    "pickle_out.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "gputest",
   "language": "python",
   "name": "gputest"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
